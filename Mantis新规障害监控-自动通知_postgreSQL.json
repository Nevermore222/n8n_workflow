{
  "name": "Mantis新规障害监控-自动通知_postgreSQL",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes",
              "minutesInterval": 30
            }
          ]
        }
      },
      "id": "b6dc97bf-1d11-47f0-8101-febcf8f93f29",
      "name": "定时触发_每30分钟",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -16,
        368
      ],
      "notes": "每30分钟自动检查一次新提出的障害"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE(MAX(bug_id), 0) AS max_checked_bug_id FROM mantis.new_bug_monitor_log;",
        "options": {}
      },
      "id": "f0c3d943-2f95-436f-bd75-faf0b4d2530e",
      "name": "查询已检查的最大BugID",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        208,
        368
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "从监控日志表获取上次检查到的最大bug_id"
    },
    {
      "parameters": {
        "jsCode": "// 准备查询参数\nconst maxCheckedId = $('查询已检查的最大BugID').first().json.max_checked_bug_id || 0;\n\nreturn [{\n  json: {\n    max_checked_bug_id: maxCheckedId,\n    check_time: new Date().toISOString()\n  }\n}];"
      },
      "id": "6ad61377-b361-485d-87f2-2f72efe5d394",
      "name": "准备查询参数",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        432,
        368
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT\n  b.id AS bug_id,\n  p.name AS project_name,\n  FROM_UNIXTIME(b.date_submitted) AS registered_at,\n  CASE b.status\n    WHEN 10 THEN 'new'\n    WHEN 20 THEN 'feedback'\n    WHEN 30 THEN 'acknowledged'\n    WHEN 40 THEN 'confirmed'\n    WHEN 50 THEN 'assigned'\n    WHEN 77 THEN '調査中'\n    WHEN 78 THEN '修正中'\n    WHEN 80 THEN 'resolved'\n    WHEN 85 THEN '確認済'\n    WHEN 90 THEN 'closed'\n    ELSE CAST(b.status AS CHAR)\n  END AS status_name,\n  b.summary,\n  bt.description AS detail_description,\n  c.name AS category_name\nFROM mantis_bug_table b\nLEFT JOIN mantis_project_table p ON p.id = b.project_id\nLEFT JOIN mantis_bug_text_table bt ON bt.id = b.bug_text_id\nLEFT JOIN mantis_category_table c ON c.id = b.category_id\nWHERE b.status = 10\n  AND b.id > {{ $json.max_checked_bug_id || 0 }}\n  AND FROM_UNIXTIME(b.date_submitted) >= '2025-10-01 00:00:00'\nORDER BY b.id\nLIMIT 50;",
        "options": {}
      },
      "id": "3869ba30-e2fe-47c9-9ab5-288b4ea0fe87",
      "name": "查询新规障害",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.1,
      "position": [
        656,
        368
      ],
      "credentials": {
        "mySql": {
          "id": "JN4ZRi7Xi3HQr9k7",
          "name": "SourceDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "查询status=10的新障害(2025年10月后)，每次最多50条"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $items(\"查询新规障害\").length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "id": "59317d7c-8234-47e2-af79-f9a0f0772e4e",
      "name": "判断是否有新障害",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        880,
        368
      ]
    },
    {
      "parameters": {
        "jsCode": "// 准备调用Dify的数据 - 将每条障害格式化为AI诊断请求\nconst bugs = $input.all();\n\nif (bugs.length === 0) {\n  return [];\n}\n\n// 为每条障害生成Dify请求数据\nconst difyRequests = bugs.map(item => {\n  const bug = item.json;\n  \n  // 构建诊断查询文本\n  const query = `请分析以下障害信息并提供诊断建议：\n\n障害编号：${bug.bug_id}\n项目名称：${bug.project_name || '未指定'}\n分类：${bug.category_name || '未分类'}\n概要：${bug.summary || '无'}\n\n详细描述：\n${bug.detail_description || '无详细描述'}\n\n请基于历史案例提供：\n1. 相似案例分析\n2. 根本原因分析\n3. 诊断建议和定位方向\n4. 修正方案参考`;\n\n  return {\n    json: {\n      bug_id: bug.bug_id,\n      project_name: bug.project_name,\n      category_name: bug.category_name,\n      summary: bug.summary,\n      detail_description: bug.detail_description,\n      dify_query: query,\n      request_time: new Date().toISOString()\n    }\n  };\n});\n\nreturn difyRequests;"
      },
      "id": "8f384552-b445-44f9-b1b4-782ac240aea8",
      "name": "准备Dify请求",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        256
      ],
      "onError": "continueErrorOutput",
      "notes": "为每条障害准备Dify AI诊断请求数据"
    },
    {
      "parameters": {
        "options": {
          "reset": false
        }
      },
      "id": "37738c96-5c33-4c84-98a3-85123c4c5df8",
      "name": "循环处理障害",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        1328,
        240
      ],
      "notes": "逐条处理障害，每次处理1条"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://192.168.8.247/v1/chat-messages",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer app-apBkuZviSKXjTC988ltkMuKT"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"inputs\": {},\n  \"query\": {{ JSON.stringify($json.dify_query) }},\n  \"response_mode\": \"streaming\",\n  \"user\": \"n8n-workflow\",\n  \"conversation_id\": \"\"\n}",
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          }
        }
      },
      "id": "5c7e4bf9-a140-4be6-8256-349299900206",
      "name": "调用Dify智能体",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1552,
        256
      ],
      "onError": "continueErrorOutput",
      "notes": "调用Dify障害诊断Agent获取AI建议"
    },
    {
      "parameters": {
        "jsCode": "// 处理Dify streaming返回结果 - 循环模式（单条）\nconst httpResponse = $input.first();\nconst loopItem = $('循环处理障害').first();\n\nif (!loopItem || !loopItem.json || !loopItem.json.bug_id) {\n  throw new Error('无法获取Bug ID数据');\n}\n\nconst originalData = loopItem.json;\nlet aiSuggestions = '';\nlet status = 'failed';\nlet errorMessage = null;\n\ntry {\n  const response = httpResponse.json;\n  \n  // 处理streaming格式：data字段包含SSE流\n  if (response && response.data) {\n    const streamData = response.data;\n    const lines = streamData.split('\\n');\n    let fullAnswer = '';\n    \n    for (const line of lines) {\n      if (line.startsWith('data: ')) {\n        try {\n          const jsonStr = line.substring(6);\n          const event = JSON.parse(jsonStr);\n          \n          if (event.event === 'agent_message' && event.answer) {\n            fullAnswer += event.answer;\n          }\n        } catch (parseError) {\n          continue;\n        }\n      }\n    }\n    \n    if (fullAnswer) {\n      aiSuggestions = fullAnswer.trim();\n      status = 'success';\n      console.log('Bug #' + originalData.bug_id + ' AI诊断成功');\n    } else {\n      errorMessage = 'Dify streaming响应中未找到answer字段';\n    }\n  } else {\n    errorMessage = 'Dify返回格式异常: ' + JSON.stringify(response).substring(0, 200);\n  }\n} catch (error) {\n  errorMessage = 'AI响应解析失败: ' + error.message;\n}\n\nreturn [{\n  json: {\n    bug_id: originalData.bug_id,\n    ai_suggestions: aiSuggestions,\n    status: status,\n    error_message: errorMessage,\n    request_time: originalData.request_time,\n    response_time: new Date().toISOString(),\n    project_name: originalData.project_name,\n    summary: originalData.summary\n  }\n}];"
      },
      "id": "7b54dc01-926f-4159-9435-c8e8e20c06e8",
      "name": "处理AI响应",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1776,
        256
      ],
      "onError": "continueErrorOutput",
      "notes": "解析Dify返回的AI诊断结果（单条）"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO mantis.bug_ai_diagnosis (\n  bug_id,\n  ai_suggestions,\n  status,\n  error_message,\n  request_time,\n  response_time,\n  project_name,\n  bug_summary\n)\nVALUES (\n  {{ $json.bug_id }},\n  {{ (() => {\n    const str = $json.ai_suggestions;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }},\n  {{ (() => {\n    const str = $json.status;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }},\n  {{ (() => {\n    const str = $json.error_message;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }},\n  {{ (() => {\n    const str = $json.request_time;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }},\n  {{ (() => {\n    const str = $json.response_time;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }},\n  {{ (() => {\n    const str = $json.project_name;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }},\n  {{ (() => {\n    const str = $json.summary;\n    if (!str || str === 'null' || str === 'NULL') return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  })() }}\n)\nON CONFLICT (bug_id) DO UPDATE SET\n  ai_suggestions = EXCLUDED.ai_suggestions,\n  status = EXCLUDED.status,\n  error_message = EXCLUDED.error_message,\n  response_time = EXCLUDED.response_time,\n  updated_at = NOW();",
        "options": {}
      },
      "id": "dec2d91d-45d3-437f-bfaf-c7ef9e28cdee",
      "name": "保存AI诊断结果",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        2000,
        256
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "将AI诊断结果保存到数据库"
    },
    {
      "parameters": {
        "jsCode": "// 生成通知汇总\nconst aiResults = $('处理AI响应').all();\nconst bugs = $('查询新规障害').all();\nconst checkTime = $('准备查询参数').first().json.check_time;\n\nif (bugs.length === 0) {\n  return [{ json: { message: '没有新的障害', count: 0 } }];\n}\n\nconst successCount = aiResults.filter(r => r.json.status === 'success').length;\nconst failedCount = aiResults.filter(r => r.json.status === 'failed').length;\n\nconst lines = [\n  `📢 *新规障害AI诊断通知* - ${new Date(checkTime).toLocaleString('ja-JP')}`,\n  ``,\n  `发现 *${bugs.length}* 个新障害，AI诊断完成：`,\n  `✅ 成功: ${successCount}个`,\n  `❌ 失败: ${failedCount}个`,\n  ``,\n  `---`,\n  ``\n];\n\nbugs.forEach((item, index) => {\n  const bug = item.json;\n  const aiResult = aiResults[index]?.json;\n  const registeredDate = bug.registered_at ? new Date(bug.registered_at).toLocaleString('ja-JP') : 'N/A';\n  \n  lines.push(`*${index + 1}. Bug #${bug.bug_id}* ${aiResult?.status === 'success' ? '✅' : '❌'}`);\n  lines.push(`  📋 概要: ${bug.summary || 'N/A'}`);\n  lines.push(`  📁 项目: ${bug.project_name || 'N/A'}`);\n  lines.push(`  📂 分类: ${bug.category_name || 'N/A'}`);\n  lines.push(`  🕐 登录日期: ${registeredDate}`);\n  \n  if (aiResult?.status === 'success') {\n    const suggestion = aiResult.ai_suggestions.substring(0, 150) + '...';\n    lines.push(`  🤖 AI诊断: ${suggestion}`);\n  } else if (aiResult?.error_message) {\n    lines.push(`  ⚠️ 诊断失败: ${aiResult.error_message}`);\n  }\n  \n  lines.push(``);\n});\n\nlines.push(`---`);\nlines.push(`最大BugID: ${Math.max(...bugs.map(b => b.json.bug_id))}`);\n\nconst formattedMessage = lines.join('\\n');\n\nreturn [{\n  json: {\n    message: formattedMessage,\n    count: bugs.length,\n    success_count: successCount,\n    failed_count: failedCount,\n    max_bug_id: Math.max(...bugs.map(b => b.json.bug_id)),\n    check_time: checkTime\n  }\n}];"
      },
      "id": "3ebee978-99ac-45d0-98ed-ce1bae83c968",
      "name": "格式化通知汇总",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        16
      ],
      "onError": "continueErrorOutput",
      "notes": "生成包含AI诊断结果的通知汇总"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO mantis.new_bug_monitor_log (bug_id, check_time, bug_summary, project_name, category_name, registered_at)\nVALUES \n{{ $('查询新规障害').all().map(item => {\n  // 简单的单引号转义函数\n  function escapeSQL(str) {\n    if (!str) return 'NULL';\n    return \"'\" + String(str).replace(/'/g, \"''\").replace(/\\\\/g, \"\\\\\\\\\") + \"'\";\n  }\n  \n  return `(${item.json.bug_id}, NOW(), ${escapeSQL(item.json.summary)}, ${escapeSQL(item.json.project_name)}, ${escapeSQL(item.json.category_name)}, ${escapeSQL(item.json.registered_at)})`;\n}).join(',\\n') }}\nON CONFLICT (bug_id) DO UPDATE SET\n  check_time = EXCLUDED.check_time;",
        "options": {}
      },
      "id": "48466dd2-731c-4a40-8ea5-9993228e6ef4",
      "name": "记录已检查的障害",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        1344,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "将检查过的障害记录到日志表，避免重复通知"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS mantis.new_bug_monitor_log (\n  id BIGSERIAL PRIMARY KEY,\n  bug_id INTEGER NOT NULL UNIQUE,\n  check_time TIMESTAMP NOT NULL DEFAULT NOW(),\n  bug_summary TEXT,\n  project_name VARCHAR(255),\n  category_name VARCHAR(255),\n  registered_at TIMESTAMP,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX IF NOT EXISTS idx_new_bug_monitor_bug_id ON mantis.new_bug_monitor_log(bug_id);\nCREATE INDEX IF NOT EXISTS idx_new_bug_monitor_check_time ON mantis.new_bug_monitor_log(check_time);\nCREATE INDEX IF NOT EXISTS idx_new_bug_monitor_registered_at ON mantis.new_bug_monitor_log(registered_at);",
        "options": {}
      },
      "id": "1e52b32b-64e8-49be-a38b-e19bc3232b1e",
      "name": "初始化监控表",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        0,
        144
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "首次运行时创建监控日志表（仅执行一次即可）"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE TABLE IF NOT EXISTS mantis.bug_ai_diagnosis (\n  id BIGSERIAL PRIMARY KEY,\n  bug_id INTEGER NOT NULL UNIQUE,\n  ai_suggestions TEXT,\n  status VARCHAR(20) NOT NULL DEFAULT 'pending',\n  error_message TEXT,\n  request_time TIMESTAMP NOT NULL,\n  response_time TIMESTAMP,\n  project_name VARCHAR(255),\n  bug_summary TEXT,\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\nCREATE INDEX IF NOT EXISTS idx_bug_ai_diagnosis_bug_id ON mantis.bug_ai_diagnosis(bug_id);\nCREATE INDEX IF NOT EXISTS idx_bug_ai_diagnosis_status ON mantis.bug_ai_diagnosis(status);\nCREATE INDEX IF NOT EXISTS idx_bug_ai_diagnosis_created_at ON mantis.bug_ai_diagnosis(created_at);\n\nCOMMENT ON TABLE mantis.bug_ai_diagnosis IS 'AI障害诊断结果表';\nCOMMENT ON COLUMN mantis.bug_ai_diagnosis.bug_id IS '障害编号';\nCOMMENT ON COLUMN mantis.bug_ai_diagnosis.ai_suggestions IS 'AI诊断建议内容';\nCOMMENT ON COLUMN mantis.bug_ai_diagnosis.status IS '诊断状态: success/failed/pending';\nCOMMENT ON COLUMN mantis.bug_ai_diagnosis.error_message IS '失败时的错误信息';\nCOMMENT ON COLUMN mantis.bug_ai_diagnosis.request_time IS '发起请求时间';\nCOMMENT ON COLUMN mantis.bug_ai_diagnosis.response_time IS '收到响应时间';",
        "options": {}
      },
      "id": "0b2e51c5-599b-4c4a-8624-0751eb4abeaa",
      "name": "初始化AI诊断表",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "首次运行时创建AI诊断结果表（仅执行一次即可）"
    }
  ],
  "pinData": {},
  "connections": {
    "定时触发_每30分钟": {
      "main": [
        [
          {
            "node": "查询已检查的最大BugID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "查询已检查的最大BugID": {
      "main": [
        [
          {
            "node": "准备查询参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备查询参数": {
      "main": [
        [
          {
            "node": "查询新规障害",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "查询新规障害": {
      "main": [
        [
          {
            "node": "判断是否有新障害",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断是否有新障害": {
      "main": [
        [
          {
            "node": "准备Dify请求",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备Dify请求": {
      "main": [
        [
          {
            "node": "循环处理障害",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "循环处理障害": {
      "main": [
        [
          {
            "node": "格式化通知汇总",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "调用Dify智能体",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "调用Dify智能体": {
      "main": [
        [
          {
            "node": "处理AI响应",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "处理AI响应": {
      "main": [
        [
          {
            "node": "保存AI诊断结果",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "保存AI诊断结果": {
      "main": [
        [
          {
            "node": "循环处理障害",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "格式化通知汇总": {
      "main": [
        [
          {
            "node": "记录已检查的障害",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "6305eb98-09c3-425d-97cd-3e8e164e5092",
  "meta": {
    "instanceId": "1003d7a4418464b97d5dcd6234164bb132b89fde605b38f31cba0abf5a7b1b81"
  },
  "id": "oEHc559vB0Nx4mPE",
  "tags": [
    {
      "createdAt": "2025-10-23T06:06:18.958Z",
      "updatedAt": "2025-10-23T06:06:18.958Z",
      "id": "n720X8gn22laKLzW",
      "name": "Mantis监控"
    }
  ]
}