{
  "name": "Mantis障害数据-智能同步V2.0.0",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT COALESCE(MAX(last_synced_bug_id), 0) AS max_synced_bug_id FROM mantis.sync_log WHERE sync_status = 'SUCCESS' AND sync_type = 'INCREMENTAL';",
        "options": {}
      },
      "id": "49850cbb-b02f-4a9e-981d-fa2c78f7d2ee",
      "name": "查询已同步的最大BugID",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        -1968,
        272
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "从sync_log表获取上次成功同步的最大bug_id，避免数据遗漏"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO mantis.sync_log (sync_type, sync_status, start_time) VALUES ('INCREMENTAL', 'RUNNING', NOW()) RETURNING id as sync_log_id;",
        "options": {}
      },
      "id": "b1a1fc35-2e3f-49bb-8294-e3ad9369b789",
      "name": "创建同步日志",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        -1792,
        256
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// 准备查询参数：从最大bug_id+1开始同步\nconst maxBugId = $('查询已同步的最大BugID').first().json.max_synced_bug_id || 0;\nconst syncLogId = $('创建同步日志').first().json.sync_log_id;\n\nreturn [{\n  json: {\n    max_synced_bug_id: maxBugId,\n    sync_log_id: syncLogId,\n    offset: 0\n  }\n}];"
      },
      "id": "81070bae-b8ec-4e24-a91f-a14c9c6070ca",
      "name": "准备查询参数",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1616,
        240
      ],
      "onError": "continueErrorOutput",
      "notes": "从最大bug_id开始查询，只同步新增数据"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "WITH target_bugs AS (\n  SELECT id, {{ $json.offset || 0 }} AS query_offset\n  FROM mantis_bug_table\n  WHERE status = 85\n    AND id > {{ $json.max_synced_bug_id || 0 }}\n  ORDER BY id\n  LIMIT 500 OFFSET {{ $json.offset || 0 }}\n),\nlatest_history AS (\n  SELECT\n    bug_id,\n    field_name,\n    new_value,\n    ROW_NUMBER() OVER (PARTITION BY bug_id, field_name ORDER BY date_modified DESC, id DESC) AS rn\n  FROM mantis_bug_history_table\n  WHERE bug_id IN (SELECT id FROM target_bugs)\n    AND field_name IN (\n      '確認者(テスト)', '確認日(テスト)',\n      '調査者', '調査日',\n      '修正者', '修正日',\n      'バグ分類', 'バグ区分', '関連コマンド',\n      '原因区分(大)', '原因区分(小)',\n      '障害発生原因', '修正内容'\n    )\n),\nhistory_pivot AS (\n  SELECT\n    bug_id,\n    MAX(CASE WHEN field_name = '確認者(テスト)' THEN new_value END) AS test_confirmer_name,\n    MAX(CASE WHEN field_name = '確認日(テスト)' THEN new_value END) AS test_confirmed_ts,\n    MAX(CASE WHEN field_name = '調査者' THEN new_value END) AS investigator,\n    MAX(CASE WHEN field_name = '調査日' THEN new_value END) AS investigated_ts,\n    MAX(CASE WHEN field_name = '修正者' THEN new_value END) AS fixer,\n    MAX(CASE WHEN field_name = '修正日' THEN new_value END) AS fixed_ts,\n    MAX(CASE WHEN field_name = 'バグ分類' THEN new_value END) AS bug_category_jp,\n    MAX(CASE WHEN field_name = 'バグ区分' THEN new_value END) AS bug_classification,\n    MAX(CASE WHEN field_name = '関連コマンド' THEN new_value END) AS related_command,\n    MAX(CASE WHEN field_name = '原因区分(大)' THEN new_value END) AS cause_large,\n    MAX(CASE WHEN field_name = '原因区分(小)' THEN new_value END) AS cause_small,\n    MAX(CASE WHEN field_name = '障害発生原因' THEN new_value END) AS root_cause_text,\n    MAX(CASE WHEN field_name = '修正内容' THEN new_value END) AS fix_detail_text\n  FROM latest_history\n  WHERE rn = 1\n  GROUP BY bug_id\n)\nSELECT\n  b.id AS bug_id,\n  LPAD(CAST(b.id AS CHAR), 7, '0') AS bug_no_for_ui,\n  p.name AS project_name,\n  CASE b.view_state\n    WHEN 10 THEN '公開'\n    WHEN 50 THEN '非公開'\n    ELSE CONCAT('view_state_', b.view_state)\n  END AS view_state_name,\n  FROM_UNIXTIME(b.date_submitted) AS registered_at,\n  FROM_UNIXTIME(b.last_updated) AS last_updated_at,\n  CONCAT_WS('_', hu.username, hu.realname) AS handler_display,\n  CONCAT_WS('_', ru.username, ru.realname) AS reporter_display,\n  CASE b.status\n    WHEN 10 THEN 'new' WHEN 20 THEN 'feedback' WHEN 30 THEN 'acknowledged' WHEN 40 THEN 'confirmed'\n    WHEN 50 THEN 'assigned' WHEN 77 THEN '調査中' WHEN 78 THEN '修正中' WHEN 80 THEN 'resolved'\n    WHEN 85 THEN '確認済' WHEN 90 THEN 'closed' ELSE CAST(b.status AS CHAR)\n  END AS status_name,\n  CASE b.priority\n    WHEN 10 THEN 'none' WHEN 20 THEN 'low' WHEN 30 THEN 'normal' WHEN 40 THEN 'high'\n    WHEN 50 THEN 'urgent' WHEN 60 THEN 'immediate' ELSE CAST(b.priority AS CHAR)\n  END AS priority_name,\n  CASE b.severity\n    WHEN 10 THEN 'feature' WHEN 20 THEN 'trivial' WHEN 30 THEN 'text' WHEN 40 THEN 'tweak'\n    WHEN 50 THEN 'minor' WHEN 60 THEN 'major' WHEN 70 THEN 'crash' WHEN 80 THEN 'block'\n    ELSE CAST(b.severity AS CHAR)\n  END AS severity_name,\n  b.reproducibility,\n  b.summary,\n  bt.description AS detail_description,\n  c.name AS category_name,\n  hp.investigator,\n  FROM_UNIXTIME(CAST(hp.investigated_ts AS UNSIGNED)) AS investigated_at,\n  hp.fixer,\n  FROM_UNIXTIME(CAST(hp.fixed_ts AS UNSIGNED)) AS fixed_at,\n  NULLIF(TRIM(hp.bug_category_jp), '') AS bug_category_jp,\n  NULLIF(TRIM(hp.bug_classification), '') AS bug_classification,\n  NULLIF(TRIM(hp.related_command), '') AS related_command,\n  NULLIF(TRIM(hp.cause_large), '') AS cause_large,\n  NULLIF(TRIM(hp.cause_small), '') AS cause_small,\n  hp.root_cause_text,\n  hp.fix_detail_text,\n  tb.query_offset AS current_offset\nFROM target_bugs tb\nJOIN mantis_bug_table b ON b.id = tb.id\nLEFT JOIN mantis_project_table p ON p.id = b.project_id\nLEFT JOIN mantis_user_table hu ON hu.id = b.handler_id\nLEFT JOIN mantis_user_table ru ON ru.id = b.reporter_id\nLEFT JOIN mantis_bug_text_table bt ON bt.id = b.bug_text_id\nLEFT JOIN mantis_category_table c ON c.id = b.category_id\nLEFT JOIN history_pivot hp ON hp.bug_id = b.id\nORDER BY b.id;",
        "options": {}
      },
      "id": "0ba97c41-1356-4eef-a780-a39c429f0c67",
      "name": "查询待同步数据",
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.1,
      "position": [
        -1408,
        224
      ],
      "credentials": {
        "mySql": {
          "id": "JN4ZRi7Xi3HQr9k7",
          "name": "SourceDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "每批查询500条，后续逐条插入避免参数限制"
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $items(\"查询待同步数据\").length }}",
              "operation": "larger"
            }
          ]
        }
      },
      "id": "bdc45b5c-ca3c-4b3d-8eff-cf624eeff6f4",
      "name": "判断是否有数据",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -1184,
        208
      ]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "={{ $items('查询待同步数据').length > 0 ? 'SELECT bug_id FROM mantis.bug_analysis WHERE bug_id = ANY(ARRAY[' + $items('查询待同步数据').map(item => item.json.bug_id).join(',') + ']::INTEGER[]);' : 'SELECT 0 AS bug_id WHERE FALSE;' }}",
        "options": {}
      },
      "id": "8fe6fdca-2080-45b0-be1a-62d50c625051",
      "name": "查询已存在的BugID列表",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        -928,
        80
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "查询目标表中已存在的bug_id，用于过滤"
    },
    {
      "parameters": {
        "jsCode": "// 过滤掉已存在的bug_id，只保留新数据\nconst sourceItems = $items(\"查询待同步数据\");\nconst existingBugIds = new Set(\n  $items(\"查询已存在的BugID列表\").map(item => item.json.bug_id)\n);\n\n// 过滤出不存在的bug_id\nconst newItems = sourceItems.filter(item => {\n  const bugId = item.json.bug_id;\n  return !existingBugIds.has(bugId);\n});\n\nconst newCount = newItems.length;\nconst totalCount = sourceItems.length;\nconst skippedCount = totalCount - newCount;\n\nconsole.log(`总数据: ${totalCount}, 已存在(跳过): ${skippedCount}, 新数据: ${newCount}`);\n\n// 始终返回数据，但标记是否有新数据\nif (newCount === 0) {\n  // 没有新数据时，返回一个标记对象用于继续流程\n  return [{\n    json: {\n      has_new_data: false,\n      skipped_count: skippedCount,\n      message: '所有数据已存在，跳过插入'\n    }\n  }];\n}\n\n// 有新数据时，为每个item添加标记\nreturn newItems.map(item => ({\n  json: {\n    ...item.json,\n    has_new_data: true\n  }\n}));"
      },
      "id": "3f0f5058-ed89-4b24-936b-5886b977057f",
      "name": "过滤新数据",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -688,
        64
      ],
      "onError": "continueErrorOutput",
      "notes": "过滤掉已存在的bug_id，只插入新数据，避免唯一键冲突"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.has_new_data }}",
              "value2": true
            }
          ]
        }
      },
      "id": "24643e7d-814b-4a01-a202-c924ebed30c4",
      "name": "判断是否有新数据要插入",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        -432,
        -16
      ],
      "notes": "如果没有新数据，跳过插入，直接判断是否继续下一批"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "mantis",
          "mode": "list",
          "cachedResultName": "mantis"
        },
        "table": {
          "__rl": true,
          "value": "bug_analysis",
          "mode": "list",
          "cachedResultName": "bug_analysis"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "bug_id": "={{ $json.bug_id }}",
            "bug_no_for_ui": "={{ $json.bug_no_for_ui }}",
            "project_name": "={{ $json.project_name }}",
            "view_state_name": "={{ $json.view_state_name }}",
            "registered_at": "={{ $json.registered_at }}",
            "last_updated_at": "={{ $json.last_updated_at }}",
            "handler_display": "={{ $json.handler_display }}",
            "reporter_display": "={{ $json.reporter_display }}",
            "status_name": "={{ $json.status_name }}",
            "priority_name": "={{ $json.priority_name }}",
            "severity_name": "={{ $json.severity_name }}",
            "reproducibility": "={{ $json.reproducibility }}",
            "summary": "={{ $json.summary }}",
            "detail_description": "={{ $json.detail_description }}",
            "category_name": "={{ $json.category_name }}",
            "investigator": "={{ $json.investigator }}",
            "investigated_at": "={{ $json.investigated_at }}",
            "fixer": "={{ $json.fixer }}",
            "fixed_at": "={{ $json.fixed_at }}",
            "bug_category_jp": "={{ $json.bug_category_jp }}",
            "bug_classification": "={{ $json.bug_classification }}",
            "related_command": "={{ $json.related_command }}",
            "cause_large": "={{ $json.cause_large }}",
            "cause_small": "={{ $json.cause_small }}",
            "root_cause_text": "={{ $json.root_cause_text }}",
            "fix_detail_text": "={{ $json.fix_detail_text }}"
          },
          "matchingColumns": [
            "bug_id"
          ],
          "schema": []
        },
        "options": {
          "queryBatching": "transaction"
        }
      },
      "id": "2fbb848e-ff0f-4bac-b9a0-178484d3b045",
      "name": "逐条插入PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.4,
      "position": [
        -224,
        -48
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput",
      "notes": "使用原生INSERT节点逐条插入，通过matchingColumns=['bug_id']实现UPSERT，避免主键冲突"
    },
    {
      "parameters": {
        "jsCode": "// 更新进度并判断是否继续\nconst syncLogId = $('创建同步日志').first().json.sync_log_id;\nconst insertedItems = $('逐条插入PostgreSQL').all();\nconst processedCount = insertedItems.length;\n\n// 从查询结果获取offset信息\nconst sourceItems = $('查询待同步数据').all();\nconst currentOffset = sourceItems.length > 0 ? sourceItems[0].json.current_offset : 0;\nconst sourceCount = sourceItems.length;  // 查询到的原始数据量\n\nconst maxSyncedBugId = $('准备查询参数').first().json.max_synced_bug_id;\n\n// 🔥 关键修复: 计算本次实际处理的最大bug_id\nconst processedBugIds = insertedItems.map(item => item.json.bug_id || 0);\nconst currentMaxBugId = processedBugIds.length > 0 ? Math.max(...processedBugIds) : maxSyncedBugId;\n\nconsole.log(`查询到${sourceCount}条, 过滤后插入${processedCount}条, 最大bug_id: ${currentMaxBugId}`);\n\n// 判断是否继续: 基于查询到的原始数据量,而非插入数量\nconst shouldContinue = sourceCount >= 500;\n\nreturn [{\n  json: {\n    sync_log_id: syncLogId,\n    records_processed: processedCount,\n    next_offset: currentOffset + 500,\n    should_continue: shouldContinue,\n    max_synced_bug_id: maxSyncedBugId,\n    current_max_bug_id: currentMaxBugId  // 本次处理的最大bug_id\n  }\n}];"
      },
      "id": "77515cf3-caf1-44ec-b474-2cf3e007087a",
      "name": "更新处理进度",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        0,
        -64
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// 没有新数据时，准备继续下一批的参数\nconst syncLogId = $('创建同步日志').first().json.sync_log_id;\nconst sourceItems = $('查询待同步数据').all();\nconst currentOffset = sourceItems.length > 0 ? sourceItems[0].json.current_offset : 0;\nconst sourceCount = sourceItems.length;\nconst maxSyncedBugId = $('准备查询参数').first().json.max_synced_bug_id;\n\nconsole.log(`本批${sourceCount}条数据全部已存在，跳过插入，继续下一批`);\n\n// 判断是否继续\nconst shouldContinue = sourceCount >= 500;\n\nreturn [{\n  json: {\n    sync_log_id: syncLogId,\n    records_processed: 0,  // 实际插入0条\n    next_offset: currentOffset + 500,\n    should_continue: shouldContinue,\n    max_synced_bug_id: maxSyncedBugId,\n    current_max_bug_id: maxSyncedBugId,  // 没有新数据，保持原值\n    skipped: true\n  }\n}];"
      },
      "id": "9a3b444e-db75-4617-aa59-7a363d601576",
      "name": "准备跳过进度",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -368,
        192
      ],
      "onError": "continueErrorOutput",
      "notes": "当本批数据全部已存在时，跳过插入但继续判断下一批"
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.should_continue }}",
              "value2": true
            }
          ]
        }
      },
      "id": "f08d9ac7-f1b0-4bff-8d3f-3edbdad54e1b",
      "name": "判断是否继续",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [
        128,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// 准备下一批次参数\nreturn [{\n  json: {\n    offset: $json.next_offset,\n    max_synced_bug_id: $json.max_synced_bug_id,\n    sync_log_id: $json.sync_log_id\n  }\n}];"
      },
      "id": "4953e4ad-112f-46c3-be75-6859c3cffb39",
      "name": "准备下一批",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        352,
        208
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE mantis.sync_log \nSET \n  sync_status = 'SUCCESS',\n  end_time = NOW(),\n  execution_time_seconds = EXTRACT(EPOCH FROM (NOW() - start_time))::INTEGER,\n  last_synced_timestamp = NOW(),\n  last_synced_bug_id = (SELECT MAX(bug_id) FROM mantis.bug_analysis)\nWHERE id = {{ $('创建同步日志').first().json.sync_log_id }};",
        "options": {}
      },
      "id": "6fa8da1b-b33d-4db8-91c3-02329816acc1",
      "name": "完成同步日志",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        -896,
        464
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE mantis.sync_config \nSET config_value = NOW()::TEXT\nWHERE config_key = 'last_sync_timestamp';",
        "options": {}
      },
      "id": "14ea07c3-79e3-4765-a040-d265622eee71",
      "name": "更新同步配置",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        -624,
        448
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n  COUNT(*) as total_records,\n  MAX(last_updated_at) as latest_update,\n  MIN(registered_at) as earliest_create\nFROM mantis.bug_analysis;",
        "options": {}
      },
      "id": "14d08adf-2c99-4dcc-9748-a5c03df64c25",
      "name": "获取最终统计",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.1,
      "position": [
        -368,
        432
      ],
      "credentials": {
        "postgres": {
          "id": "tWcUIJhVg6bDlGDc",
          "name": "TargetDB"
        }
      },
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 2
            }
          ]
        }
      },
      "id": "f7bafbb5-af00-43e7-a1b2-fe5901cad811",
      "name": "定时触发_每2h",
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.1,
      "position": [
        -2128,
        272
      ],
      "notes": "每2h自动执行一次，快速同步存量数据"
    }
  ],
  "pinData": {},
  "connections": {
    "查询已同步的最大BugID": {
      "main": [
        [
          {
            "node": "创建同步日志",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "创建同步日志": {
      "main": [
        [
          {
            "node": "准备查询参数",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备查询参数": {
      "main": [
        [
          {
            "node": "查询待同步数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "查询待同步数据": {
      "main": [
        [
          {
            "node": "判断是否有数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断是否有数据": {
      "main": [
        [
          {
            "node": "查询已存在的BugID列表",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "完成同步日志",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "查询已存在的BugID列表": {
      "main": [
        [
          {
            "node": "过滤新数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "过滤新数据": {
      "main": [
        [
          {
            "node": "判断是否有新数据要插入",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断是否有新数据要插入": {
      "main": [
        [
          {
            "node": "逐条插入PostgreSQL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "准备跳过进度",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "逐条插入PostgreSQL": {
      "main": [
        [
          {
            "node": "更新处理进度",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "更新处理进度": {
      "main": [
        [
          {
            "node": "判断是否继续",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备跳过进度": {
      "main": [
        [
          {
            "node": "判断是否继续",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "判断是否继续": {
      "main": [
        [
          {
            "node": "准备下一批",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "完成同步日志",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "准备下一批": {
      "main": [
        [
          {
            "node": "查询待同步数据",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "完成同步日志": {
      "main": [
        [
          {
            "node": "更新同步配置",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "更新同步配置": {
      "main": [
        [
          {
            "node": "获取最终统计",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "定时触发_每2h": {
      "main": [
        [
          {
            "node": "查询已同步的最大BugID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1bbb121d-750b-4a52-95d6-fd67cca005bb",
  "meta": {
    "instanceId": "1003d7a4418464b97d5dcd6234164bb132b89fde605b38f31cba0abf5a7b1b81"
  },
  "id": "j6DvFoiJD7jppoWK",
  "tags": [
    {
      "createdAt": "2025-10-10T08:32:49.722Z",
      "updatedAt": "2025-10-10T08:32:49.722Z",
      "id": "LzKc1zENSTrzLIN6",
      "name": "Mantis同步"
    }
  ]
}